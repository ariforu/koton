// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ClickstreamBronze.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct ClickstreamBronze: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deviceID: String {
    get {return _deviceID ?? String()}
    set {_deviceID = newValue}
  }
  /// Returns true if `deviceID` has been explicitly set.
  var hasDeviceID: Bool {return self._deviceID != nil}
  /// Clears the value of `deviceID`. Subsequent reads from it will return its default value.
  mutating func clearDeviceID() {self._deviceID = nil}

  var eventID: String {
    get {return _eventID ?? String()}
    set {_eventID = newValue}
  }
  /// Returns true if `eventID` has been explicitly set.
  var hasEventID: Bool {return self._eventID != nil}
  /// Clears the value of `eventID`. Subsequent reads from it will return its default value.
  mutating func clearEventID() {self._eventID = nil}

  var eventTime: Int64 {
    get {return _eventTime ?? 0}
    set {_eventTime = newValue}
  }
  /// Returns true if `eventTime` has been explicitly set.
  var hasEventTime: Bool {return self._eventTime != nil}
  /// Clears the value of `eventTime`. Subsequent reads from it will return its default value.
  mutating func clearEventTime() {self._eventTime = nil}

  var productID: String {
    get {return _productID ?? String()}
    set {_productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return self._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {self._productID = nil}

  var eventType: String {
    get {return _eventType ?? String()}
    set {_eventType = newValue}
  }
  /// Returns true if `eventType` has been explicitly set.
  var hasEventType: Bool {return self._eventType != nil}
  /// Clears the value of `eventType`. Subsequent reads from it will return its default value.
  mutating func clearEventType() {self._eventType = nil}

  var userID: String {
    get {return _userID ?? String()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var recordTime: Int64 {
    get {return _recordTime ?? 0}
    set {_recordTime = newValue}
  }
  /// Returns true if `recordTime` has been explicitly set.
  var hasRecordTime: Bool {return self._recordTime != nil}
  /// Clears the value of `recordTime`. Subsequent reads from it will return its default value.
  mutating func clearRecordTime() {self._recordTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _deviceID: String? = nil
  fileprivate var _eventID: String? = nil
  fileprivate var _eventTime: Int64? = nil
  fileprivate var _productID: String? = nil
  fileprivate var _eventType: String? = nil
  fileprivate var _userID: String? = nil
  fileprivate var _recordTime: Int64? = nil
}

struct Ack: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool {
    get {return _success ?? false}
    set {_success = newValue}
  }
  /// Returns true if `success` has been explicitly set.
  var hasSuccess: Bool {return self._success != nil}
  /// Clears the value of `success`. Subsequent reads from it will return its default value.
  mutating func clearSuccess() {self._success = nil}

  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _success: Bool? = nil
  fileprivate var _message: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ClickstreamBronze: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ClickstreamBronze"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._deviceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._eventID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self._eventTime) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._productID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._eventType) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self._recordTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._deviceID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._eventID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._eventTime {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._productID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._eventType {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._recordTime {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ClickstreamBronze, rhs: ClickstreamBronze) -> Bool {
    if lhs._deviceID != rhs._deviceID {return false}
    if lhs._eventID != rhs._eventID {return false}
    if lhs._eventTime != rhs._eventTime {return false}
    if lhs._productID != rhs._productID {return false}
    if lhs._eventType != rhs._eventType {return false}
    if lhs._userID != rhs._userID {return false}
    if lhs._recordTime != rhs._recordTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ack: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Ack"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._success) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._success {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ack, rhs: Ack) -> Bool {
    if lhs._success != rhs._success {return false}
    if lhs._message != rhs._message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
