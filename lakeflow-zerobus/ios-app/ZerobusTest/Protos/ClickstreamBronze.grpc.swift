//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: ClickstreamBronze.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `ClickstreamServiceClient`, then call methods of this protocol to make API calls.
internal protocol ClickstreamServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: ClickstreamServiceClientInterceptorFactoryProtocol? { get }

  func sendClickstream(
    _ request: ClickstreamBronze,
    callOptions: CallOptions?
  ) -> UnaryCall<ClickstreamBronze, Ack>
}

extension ClickstreamServiceClientProtocol {
  internal var serviceName: String {
    return "ClickstreamService"
  }

  /// Unary call to SendClickstream
  ///
  /// - Parameters:
  ///   - request: Request to send to SendClickstream.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendClickstream(
    _ request: ClickstreamBronze,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ClickstreamBronze, Ack> {
    return self.makeUnaryCall(
      path: ClickstreamServiceClientMetadata.Methods.sendClickstream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendClickstreamInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension ClickstreamServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "ClickstreamServiceNIOClient")
internal final class ClickstreamServiceClient: ClickstreamServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: ClickstreamServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: ClickstreamServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ClickstreamService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: ClickstreamServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct ClickstreamServiceNIOClient: ClickstreamServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: ClickstreamServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the ClickstreamService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: ClickstreamServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol ClickstreamServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: ClickstreamServiceClientInterceptorFactoryProtocol? { get }

  func makeSendClickstreamCall(
    _ request: ClickstreamBronze,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<ClickstreamBronze, Ack>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension ClickstreamServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return ClickstreamServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: ClickstreamServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSendClickstreamCall(
    _ request: ClickstreamBronze,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<ClickstreamBronze, Ack> {
    return self.makeAsyncUnaryCall(
      path: ClickstreamServiceClientMetadata.Methods.sendClickstream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendClickstreamInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension ClickstreamServiceAsyncClientProtocol {
  internal func sendClickstream(
    _ request: ClickstreamBronze,
    callOptions: CallOptions? = nil
  ) async throws -> Ack {
    return try await self.performAsyncUnaryCall(
      path: ClickstreamServiceClientMetadata.Methods.sendClickstream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendClickstreamInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct ClickstreamServiceAsyncClient: ClickstreamServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: ClickstreamServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: ClickstreamServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol ClickstreamServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'sendClickstream'.
  func makeSendClickstreamInterceptors() -> [ClientInterceptor<ClickstreamBronze, Ack>]
}

internal enum ClickstreamServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ClickstreamService",
    fullName: "ClickstreamService",
    methods: [
      ClickstreamServiceClientMetadata.Methods.sendClickstream,
    ]
  )

  internal enum Methods {
    internal static let sendClickstream = GRPCMethodDescriptor(
      name: "SendClickstream",
      path: "/ClickstreamService/SendClickstream",
      type: GRPCCallType.unary
    )
  }
}

